#include <iostream>
#include <string>
using namespace std;
class Book {
public:
    int bookID;
    string title;
    string author;
    bool isAvailable;
    Book() : bookID(0), title(""), author(""), isAvailable(true) {} 
    Book(int id, string t, string a) : bookID(id), title(t), author(a), isAvailable(true) {}
};
class BorrowedBookNode {
public:
    int bookID;
    BorrowedBookNode* next;

    BorrowedBookNode(int id) : bookID(id), next(nullptr) {}
};
class Student {
public:
    int studentID;
    string name;
    BorrowedBookNode* borrowedBooksHead;

    Student() : studentID(0), name(""), borrowedBooksHead(nullptr) {}

    Student(int id, string n) : studentID(id), name(n), borrowedBooksHead(nullptr) {}

    void borrowBook(int bookID) {
        BorrowedBookNode* newNode = new BorrowedBookNode(bookID);
        newNode->next = borrowedBooksHead;
        borrowedBooksHead = newNode;
    }

    void returnBook(int bookID) {
        BorrowedBookNode* current = borrowedBooksHead;
        BorrowedBookNode* previous = nullptr;

        while (current) {
            if (current->bookID == bookID) {
                if (previous) {
                    previous->next = current->next;
                } else {
                    borrowedBooksHead = current->next;
                }
                delete current;
                return;
            }
            previous = current;
            current = current->next;
        }
    }

    bool hasBorrowedBook(int bookID) {
        BorrowedBookNode* current = borrowedBooksHead;
        while (current) {
            if (current->bookID == bookID) {
                return true;
            }
            current = current->next;
        }
        return false;
    }
};
class BookNode {
public:
    Book data;
    BookNode* next;

    BookNode(Book d) : data(d), next(nullptr) {}
};
class StudentNode {
public:
    Student data;
    StudentNode* next;

    StudentNode(Student d) : data(d), next(nullptr) {}
};
class BookLinkedList {
public:
    BookNode* head;

    BookLinkedList() : head(nullptr) {}

    void insert(Book data) {
        BookNode* newNode = new BookNode(data);
        newNode->next = head;
        head = newNode;
    }

    Book* search(int bookID) {
        BookNode* current = head;
        while (current) {
            if (current->data.bookID == bookID) {
                return &(current->data);
            }
            current = current->next;
        }
        return nullptr;
    }

    bool remove(int bookID) {
        BookNode* current = head;
        BookNode* previous = nullptr;

        while (current) {
            if (current->data.bookID == bookID) {
                if (previous) {
                    previous->next = current->next;
                } else {
                    head = current->next;
                }
                delete current;
                return true;
            }
            previous = current;
            current = current->next;
        }
        return false;
    }
};
class StudentLinkedList {
public:
    StudentNode* head;

    StudentLinkedList() : head(nullptr) {}

    void insert(Student data) {
        StudentNode* newNode = new StudentNode(data);
        newNode->next = head;
        head = newNode;
    }

    Student* search(int studentID) {
        StudentNode* current = head;
        while (current) {
            if (current->data.studentID == studentID) {
                return &(current->data);
            }
            current = current->next;
        }
        return nullptr;
    }

    bool remove(int studentID) {
        StudentNode* current = head;
        StudentNode* previous = nullptr;

        while (current) {
            if (current->data.studentID == studentID) {
                if (previous) {
                    previous->next = current->next;
                } else {
                    head = current->next;
                }
                delete current;
                return true;
            }
            previous = current;
            current = current->next;
        }
        return false;
    }
};
class BookHashTable {
private:
    int size;
    BookLinkedList* table;

    int hashFunction(int key) {
        return key % size;
    }

public:
    BookHashTable(int s = 100) : size(s), table(new BookLinkedList[s]) {}

    void insert(int key, Book data) {
        int index = hashFunction(key);
        table[index].insert(data);
    }

    Book* search(int key) {
        int index = hashFunction(key);
        return table[index].search(key);
    }

    bool remove(int key) {
        int index = hashFunction(key);
        return table[index].remove(key);
    }

    void displayBooks() {
        cout << "Books in the Library:\n";
        for (int i = 0; i < size; ++i) {
            BookNode* current = table[i].head;
            while (current) {
                cout << "ID: " << current->data.bookID
                     << ", Title: " << current->data.title
                     << ", Author: " << current->data.author
                     << ", Available: " << (current->data.isAvailable ? "Yes" : "No") << endl;
                current = current->next;
            }
        }
    }

    ~BookHashTable() {
        delete[] table;
    }
};
class StudentHashTable {
private:
    int size;
    StudentLinkedList* table;

    int hashFunction(int key) {
        return key % size;
    }

public:
    StudentHashTable(int s = 100) : size(s), table(new StudentLinkedList[s]) {}

    void insert(int key, Student data) {
        int index = hashFunction(key);
        table[index].insert(data);
    }

    Student* search(int key) {
        int index = hashFunction(key);
        return table[index].search(key);
    }

    bool remove(int key) {
        int index = hashFunction(key);
        return table[index].remove(key);
    }

    ~StudentHashTable() {
        delete[] table;
    }
};
class LibrarySystem {
private:
    BookHashTable books;
    StudentHashTable students;

    // Predefined user credentials
    string predefinedUsers[1][2] = {{"admin", "password123"}}; // Username, Password

public:
    LibrarySystem() : books(100), students(100) {}

    bool login(string username, string password) {
    for (const auto& user : predefinedUsers) {
        if (user[0] == username && user[1] == password) {
            cout << "Login successful.\n";
            return true; // Breaks out of the function if login is successful
        }
    }
    cout << "Invalid username or password.\n";
    return false; // Keeps running until all credentials are checked
}

    void addBook(int bookID, string title, string author) {
        Book book(bookID, title, author);
        books.insert(bookID, book);
        cout << "Book '" << title << "' added to the library.\n";
    }

    void addStudent(int studentID, string name) {
        Student student(studentID, name);
        students.insert(studentID, student);
        cout << "Student '" << name << "' registered in the library.\n";
    }

    void borrowBook(int studentID, int bookID) {
        Student* student = students.search(studentID);
        Book* book = books.search(bookID);

        if (student && book && book->isAvailable) {
            book->isAvailable = false;
            student->borrowBook(bookID);
            cout << "Book '" << book->title << "' borrowed by '" << student->name << "'.\n";
        } else {
            cout << "Cannot borrow book. It may not be available or the student is not registered.\n";
        }
    }

    void returnBook(int studentID, int bookID) {
        Student* student = students.search(studentID);
        Book* book = books.search(bookID);

        if (student && book && student->hasBorrowedBook(bookID)) {
            book->isAvailable = true;
            student->returnBook(bookID);
            cout << "Book '" << book->title << "' returned by '" << student->name << "'.\n";
        } else {
            cout << "The book was not borrowed by the student.\n";
        }
    }

    void displayBooks() {
        books.displayBooks();
    }

    void displayBorrowedBooks(int studentID) {
        Student* student = students.search(studentID);
        if (student) {
            BorrowedBookNode* current = student->borrowedBooksHead;
            cout << "Books borrowed by '" << student->name << "':\n";
            while (current) {
                Book* book = books.search(current->bookID);
                if (book) {
                    cout << "ID: " << book->bookID
                         << ", Title: " << book->title
                         << ", Author: " << book->author << endl;
                }
                current = current->next;
            }
        } else {
            cout << "Student not found.\n";
        }
    }

    void run() {
        string username, password;
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter password: ";
        cin >> password;

        if (!login(username, password)) {
            return;
        }

        int choice;
        while (true) {
            cout << "\nLibrary System Menu:\n";
            cout << "1. Add Book\n";
            cout << "2. Add Student\n";
            cout << "3. Borrow Book\n";
            cout << "4. Return Book\n";
            cout << "5. Display All Books\n";
            cout << "6. Display Borrowed Books by Student\n";
            cout << "7. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;

            if (choice == 1) {
                int bookID;
                string title, author;
                cout << "Enter Book ID: ";
                cin >> bookID;
                cout << "Enter Book Title: ";
                cin.ignore();
                getline(cin, title);
                cout << "Enter Author: ";
                getline(cin, author);
                addBook(bookID, title, author);
            } else if (choice == 2) {
                int studentID;
                string name;
                cout << "Enter Student ID: ";
                cin >> studentID;
                cout << "Enter Student Name: ";
                cin.ignore();
                getline(cin, name);
                addStudent(studentID, name);
            } else if (choice == 3) {
                int studentID, bookID;
                cout << "Enter Student ID: ";
                cin >> studentID;
                cout << "Enter Book ID: ";
                cin >> bookID;
                borrowBook(studentID, bookID);
            } else if (choice == 4) {
                int studentID, bookID;
                cout << "Enter Student ID: ";
                cin >> studentID;
                cout << "Enter Book ID: ";
                cin >> bookID;
                returnBook(studentID, bookID);
            } else if (choice == 5) {
                displayBooks();
            } else if (choice == 6) {
                int studentID;
                cout << "Enter Student ID: ";
                cin >> studentID;
                displayBorrowedBooks(studentID);
            } else if (choice == 7) {
                cout << "Exiting the system.\n";
                break;
            } else {
                cout << "Invalid choice. Please try again.\n";
            }
        }
    }
};
int main() {
    LibrarySystem library;
    library.run();
    return 0;
}
